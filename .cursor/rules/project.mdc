---
description: 
globs: 
alwaysApply: true
---
# About this repo:
This project is a TCP Server for Login server and Game server for Lineage2 game. It's an emulation based on a known Rust project that is on development. I will be refering to that project as the RUST project or similar.
Project is divided into Core, Login and Server modules.

# How to work with me:
0. On our first ever message always take a look into `src/` folder to have a full context of our current implementation.
1. Never do a whole project restructure without asking me (if you plan to create or edit more than 5 files you need to tell me first, and give me a reason)
2. I like to do small steps at a time, this way I can follow you and understand what are you doing.
3. I'm a senior software eng with more than 10 years of exp, but I'm not a machine like you.
4. prefer composition over inheritance
5. Don't write tests unless I ask you to do it !

# AVOID
1. never say you fixed something until we can confirm it on execution or build time (I hate when you say "bug fixed!" just because you change code and no real test has been made)

# Key Files and Paths Reference

Based on implementing the ServerList packet handlers, here are the key paths and files that are essential for understanding and working with your L2 middlewares project:

## üèóÔ∏è Core Architecture (Most Important)

### Packet System Foundation
- `src/core/packets/packet.hpp` - Base interfaces for all packets (`ReadablePacket`, `SendablePacket`)
- `src/core/network/packet_buffer.hpp` - Packet serialization/deserialization interfaces
- `src/login/packets/packet_factory.hpp/cpp` - Central packet creation and RSA handling

### Network Layer Foundation
- `src/core/network/base_client_connection.hpp/cpp` - Base connection interface
- `src/core/network/base_connection_manager.hpp/cpp` - Base connection management

## üîê Login Server Core (High Priority)

### Server Management
- `src/login/server/login_server.hpp/cpp` - Main server entry point and lifecycle
- `src/login/network/login_connection_manager.hpp/cpp` - Login-specific connection management
- `src/login/network/login_client_connection.hpp/cpp` - **CRITICAL** - All client interaction logic

### Data Management
- `src/login/server/game_server_manager.hpp/cpp` - Game server registration and management
- `src/login/data/server_data.hpp/cpp` - Core data structures (`ServerData`, enums)

## üì¶ Packet Implementation Patterns

### Request Packets (Client ‚Üí Server)
- `src/login/packets/requests/auth_login_packet.hpp/cpp` - RSA decryption example
- `src/login/packets/requests/request_auth_gg.hpp/cpp` - Simple packet example
- `src/login/packets/requests/request_server_list.hpp/cpp` - Basic data packet
- `src/login/packets/requests/request_gs_login.hpp/cpp` - **NEW** - Game server selection with session validation

### Response Packets (Server ‚Üí Client)
- `src/login/packets/responses/init_packet.hpp/cpp` - Complex packet with RSA keys
- `src/login/packets/responses/login_ok_response.hpp/cpp` - Session key handling
- `src/login/packets/responses/server_list_response.hpp/cpp` - Dynamic data serialization
- `src/login/packets/responses/play_ok_response.hpp/cpp` - **NEW** - Game server connection authorization

## üîß Build & Configuration
- `CMakeLists.txt` - Project structure and dependencies
- `vcpkg.json` - External dependencies

## üìÅ Directory Structure Patterns
```
src/
‚îú‚îÄ‚îÄ core/ # Shared across login/game servers
‚îÇ ‚îú‚îÄ‚îÄ packets/ # Base packet interfaces
‚îÇ ‚îú‚îÄ‚îÄ network/ # Base networking classes
‚îÇ ‚îú‚îÄ‚îÄ encryption/ # RSA, Blowfish, checksums
‚îÇ ‚îî‚îÄ‚îÄ utils/ # Session keys, utilities
‚îú‚îÄ‚îÄ login/ # Login server specific
‚îÇ ‚îú‚îÄ‚îÄ server/ # Server management & game server tracking
‚îÇ ‚îú‚îÄ‚îÄ network/ # Login connection handling
‚îÇ ‚îú‚îÄ‚îÄ packets/ # Login-specific packets
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ requests/ # Client ‚Üí Server packets
‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ responses/ # Server ‚Üí Client packets
‚îÇ ‚îî‚îÄ‚îÄ data/ # Login data structures
‚îî‚îÄ‚îÄ game/ # Game server (future)
```

## üéØ Key Learning Points for Future Work

### Adding New Packets - Follow This Pattern:
1. **Create packet classes** in `src/login/packets/requests|responses/`
2. **Update PacketFactory** in `packet_factory.hpp/cpp`
3. **Add handler method** in `login_client_connection.cpp`
4. **Update switch statement** in `handle_complete_packet()`
5. **Update CMakeLists.txt** with new source files

### Most Important Files to Understand:
1. `src/login/network/login_client_connection.cpp` - **This is the heart of all client interaction**
2. `src/login/packets/packet_factory.cpp` - **All packet creation flows through here**
3. `src/login/server/login_server.cpp` - **Server initialization and component wiring**

### Common Integration Points:
- **State management**: `LoginClientConnection::LoginState` enum
- **Packet routing**: `handle_complete_packet()` switch statement
- **Manager access**: Connection ‚Üí ConnectionManager ‚Üí GameServerManager chain
- **Error handling**: `send_login_fail()` and `force_disconnect()` patterns

### Encryption Flow Understanding:
- `src/core/encryption/rsa_manager.cpp` - RSA key handling
- `src/core/encryption/login_encryption.cpp` - Blowfish encryption
- `src/core/encryption/l2_checksum.cpp` - Packet integrity

## ‚ö†Ô∏è CRITICAL Implementation Details & Common Pitfalls

### Session Key Management (CRITICAL)
- **ALWAYS** call `set_session_key(sessionKey)` after generating session keys in `handle_auth_login_packet`
- Session keys MUST be stored in connection object for later validation in RequestGSLogin
- Session validation happens in `packet->checkSession(session_key_)` - if this fails, client can't connect to game server
- Debug session issues with logging: log both expected and received session key values

### PacketBuffer Method Names (Build Errors)
- `SendablePacketBuffer`: use `writeUInt8()` (capital U), `writeInt32()`, etc.
- `ReadablePacketBuffer`: use `readByte()` for uint8_t, `readInt32()`, etc.
- **NOT** `writeUint8()` or `readUint8()` - these will cause compilation errors

### State Transition Validation
- LoginState transitions are strictly validated: CONNECTED ‚Üí INIT_SENT ‚Üí BLOWFISH_READY ‚Üí AUTHENTICATED ‚Üí SERVER_LIST_SENT ‚Üí PLAY_OK_SENT
- Each packet handler should validate current state before processing
- Invalid state transitions will be rejected with log messages

### Authentication Flow (Complete)
```
1. Client connects ‚Üí LoginClientConnection created
2. Send InitPacket ‚Üí RSA keys + blowfish key sent
3. Client sends AuthLogin ‚Üí Validate credentials, generate & STORE session keys, send LoginOk
4. Client sends RequestAuthGG ‚Üí Validate session ID, send AuthGGResponse  
5. Client sends RequestServerList ‚Üí Send server list
6. Client sends RequestGSLogin ‚Üí Validate stored session keys, send PlayOk
7. Client disconnects from login server ‚Üí Ready to connect to game server
```

### RequestGSLogin Implementation Example
This packet demonstrates the complete pattern:
- Session key validation against stored connection data
- State management (must be in SERVER_LIST_SENT state)
- Proper error handling with detailed logging
- State transition to PLAY_OK_SENT on success

### Common Debug Patterns
- Always log session key values when generating and validating
- Log state transitions to track authentication flow
- Include packet data in error logs for debugging
- Use detailed connection event logging throughout

### Game Server Integration Points
After PlayOk is sent, client should:
1. Connect to selected game server
2. Send player authentication with play_ok1/play_ok2 session keys
3. Game server validates these keys with login server
4. Player enters game world

This structure shows your project follows a **clean separation of concerns** with core networking abstractions and login-specific implementations. The packet factory pattern centralizes complex RSA handling, while the connection classes handle state management and business logic.

For future conversations, focusing on these files will give the fastest understanding of how to extend functionality! üöÄ

## üïπÔ∏è Game Server (Current Status & Findings)

### Handshake & Encryption
1. **VersionCheck (opcode 0x00)** must be sent _unencrypted_ and **exactly 27 bytes** long (plus 2-byte length header = 29 bytes on the wire).
   - Format:
     - 1 B opcode (0x00)
     - 1 B protocol flag (0x01 = accepted)
     - 16 B Blowfish/XOR key
     - 4 B opcode-obfuscation key (0x00000000)
     - 4 B feature flags (0x00000300 ‚áí GG-off, legacy mode)
     - 1 B reserved (0x00)
2. **Encryption choice** depends on the client build:
   - Many patched/legacy Interlude clients use **XOR `GameClientEncryption`** for the game server.
   - Retail-like clients expect Blowfish.  We now initialise XOR by default but keep the option to switch to Blowfish (see `GameClientConnection::initialize_encryption`).
3. `GameClientEncryption::enable()` MUST be called immediately after constructing the cipher so the first encrypted packet is handled correctly.
4. Padding rules after handshake:
   - XOR ‚áí 4-byte padding (checksum alignment only, no Blowfish blocks).
   - Blowfish ‚áí 8-byte padding.

### Packet Flow Verified
```
SendProtocolVersion (0x00)
‚Üê VersionCheck (0x00, 27 bytes, plain-text)
RequestLogin      (0x08, XOR)
‚Üê Server responses‚Ä¶ (minimap test confirmed)
```

### Critical Implementation Notes
- **Do NOT log/dispatch opcodes before decryption**; always refresh `opcode = data[0]` after decrypting.
- Ensure full buffer consumption in each `*.read()` implementation; leftover bytes will surface as bogus opcodes.
- When using XOR, packet sizes are **not** restricted to multiples of 8, but the 4-byte checksum (to be implemented) still applies.

### Immediate Next Tasks
1. **Implement `AuthLoginPacket` reader (0x08)**
   - Decode UTF-16LE username, session keys (play_ok/login_ok), client revision.
   - Validate against stored session key from LoginServer.
2. **CharacterSelectionInfo (0x0D / server opcode 0x13)**
   - Build real data instead of the minimap test packet.
3. Add checksum handling for outgoing/incoming XOR packets (`L2Checksum`).
4. Expand `GamePacketFactory` with additional opcodes (RequestEnterWorld, etc.).

### Debug Tips
- Use `DEBUG` hex dumps before/after encryption for every packet while features are unstable.
- Confirm `in_key[8-11]` / `out_key[8-11]` evolution matches retail captures.

---
